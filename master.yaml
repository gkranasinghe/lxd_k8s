- hosts:
    - kmaster
  become: yes
  tasks:
    - name: create the kube user account
      user: name=kube append=yes state=present createhome=yes shell=/bin/bash

    - name: allow 'kube' to use sudo without needing a password
      lineinfile:
        dest: /etc/sudoers
        line: 'kube ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: set up authorized keys for the kube user
      authorized_key: user=kube key="{{item}}"
      with_file:
        - /home/gk/.ssh/id_rsa.pub

- hosts:
    - kmaster
  # remote_user: ubuntu
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh

  tasks:


     - name: install containerd
       shell: |
               sudo apt update -qq && sudo apt install -qq -y containerd apt-transport-https 
               sudo mkdir -p /etc/containerd
               sudo containerd config default | sudo tee /etc/containerd/config.toml
               sudo systemctl restart containerd
               sudo systemctl enable containerd

     - name: disable swap
       shell: |
               sudo swapoff -a
               sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

     - name: install and configure dependencies
       shell: |
               sudo apt-get update && sudo apt-get install -y apt-transport-https curl
               curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

     - name: Create kubernetes repo file
       file:
         path: "/etc/apt/sources.list.d/kubernetes.list"
         state: "touch"

     - name: Add K8s Source
       blockinfile:
         path: "/etc/apt/sources.list.d/kubernetes.list"
         block: |
               deb https://apt.kubernetes.io/ kubernetes-xenial main

     - name: install kubernetes
       shell: |
               sudo apt-get update
               sudo apt-get install -y kubeadm=1.22.0-00 kubelet=1.22.0-00 kubectl=1.22.0-00
               sudo apt-mark hold kubelet kubeadm kubectl

     - name: disable swap for kubelet 
       shell: |
               echo 'KUBELET_EXTRA_ARGS="--fail-swap-on=false"' |sudo tee /etc/default/kubelet
               sudo  systemctl restart kubelet
               



     - name: Hack required to provision K8s v1.15+ in LXC containers
       shell: |
               sudo apt install -qq -y net-tools
               sudo mknod /dev/kmsg c 1 11
               echo 'mknod /dev/kmsg c 1 11' | sudo tee  /etc/rc.local
               sudo chmod +x /etc/rc.local
         


- hosts:
    - kmaster
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh
  tasks:
    - name: initialize the cluster
      # shell: kubeadm init  --pod-network-cidr=10.244.0.0/16
      shell: kubeadm init --apiserver-advertise-address='{{ ansible_eth0.ipv4.address }}' --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all
      args:
        chdir: $HOME
        creates: cluster_initialized.txt

    - name: create .kube directory
      become: yes
      become_user: kube
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copies admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/kube/.kube/config
        remote_src: yes
        owner: kube

    # - name: patch kube-proxy config map and recreate pod  
    #   become: yes
    #   become_user: kube
    #   shell: |
    #            kubectl patch configmap kube-proxy -p '{"data": {"config.conf": ""} }' -n kube-system
    #            kubectl get pods  -n kube-system --no-headers=true | awk '/kube-proxy/{print $1}' | xargs  kubectl delete -n kube-system pod

    - name: patch to shared mount propagation to run calico node 
      shell: |
               sudo mount --make-rshared /
           
    - name: install Calico Pod network
      become: yes
      become_user: kube
      shell:  sudo  kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml 
      args:
        chdir: $HOME
        
    - name: Get the token for joining the worker nodes
      become: yes
      become_user: kube
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command

    # - debug:
    #   msg: "{{ kubernetes_join_command.stdout}}"
    - name: Debug join command 
      debug:
        msg: "{{ kubernetes_join_command.stdout}}"


    - name: Copy join command to local file.
      become: False
      # become: yes
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}"  dest="/tmp/kubernetes_join_command" mode=0777